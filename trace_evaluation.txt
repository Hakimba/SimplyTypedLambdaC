(*TEST ET RESULTAT DES EVALUATIONS*)

(*Premiere et deuxieme itération*)

(* ex_id : λt1.t1 *)
(* ex_k : λt2.λt3.t2 *)
(* ex_a : λt4.λt5.(t4 t5) *)
(* ex_s : λt6.λt7.λt8.((t6 t8) (t7 t8)) *)
(* ex_skk : 

((λt9.λt10.λt11.((t9 t11) (t10 t11)) λt12.λt13.t12) λt14.λt15.t14)
 -> (λt10.λt11.((λt12.λt13.t12 t11) (t10 t11)) λt14.λt15.t14)
 -> λt11.((λt12.λt13.t12 t11) (λt14.λt15.t14 t11))

*)

(* ex_delta : λt16.(t16 t16) *)

(* ex_om :

(λt18.(t18 t18) λt18.(t18 t18))
-> (λt18.(t18 t18) λt18.(t18 t18))
... infini

*)


(* ex_kiom : 
((λt4.λt5.t4 λt6.t6) (λt7.(t7 t7) λt8.(t8 t8)))
 -> (λt5.λt6.t6 (λt7.(t7 t7) λt8.(t8 t8)))
 -> (λt5.λt6.t6 (λt8.(t8 t8) λt8.(t8 t8)))
 ... infini

*)
(* ex_triple : λt9.((t9 t9) t9) *)
(* ex_siii :  

(((λt10.λt11.λt12.((t10 t12) (t11 t12)) λt13.t13) λt14.t14) λt15.t15)
 -> ((λt11.λt12.((λt13.t13 t12) (t11 t12)) λt14.t14) λt15.t15)
 -> (λt12.((λt13.t13 t12) (λt14.t14 t12)) λt15.t15)
 -> ((λt13.t13 λt15.t15) (λt14.t14 λt15.t15))
 -> (λt15.t15 (λt14.t14 λt15.t15))
 -> (λt15.t15 λt15.t15)
 -> λt15.t15

*)

(*Fin tests première et deuxieme itération *)


(*TEST INTERATION 3*)

(* ex_7p7 : 
(7 + 7)
 -> 14
*)

(* ex_plus : λt1.λt2.(t1 + t2) *)
(* ex_plus27 : 
((λt3.λt4.(t3 + t4) 2) 7)
 -> (λt4.(2 + t4) 7)
 -> (2 + 7)
 -> 9
*)

(* ex_moins : λt5.λt6.(t5 - t6) *)
(* ex_moins23 

((λt7.λt8.(t7 - t8) 2) 3)
 -> (λt8.(2 - t8) 3)
 -> (2 - 3)
 -> -1

*)
(* ex_moins32 

((λt9.λt10.(t9 - t10) 3) 2)
 -> (λt10.(3 - t10) 2)
 -> (3 - 2)
 -> 1

*)
(* ex_seq123 
[ 1 2 3 ]


*)
(* ex_enseq3 

λt11.[ t11 t11 t11 ]
*)
(* ex_enseq2d4 
λt12.λt13.[ t13 t12 t13 t12 ]

*)
(* ex_seq3i

(λt1.[ t1 t1 t1 ] λt2.t2)
 -> [ λt2.t2 λt2.t2 λt2.t2 ]
*)

(* ex_enseq2d 

((λt3.λt4.[ t3 t4 t3 t4 ] λt5.t5) 8)
 -> (λt4.[ λt5.t5 t4 λt5.t5 t4 ] 8)
 -> [ λt5.t5 8 λt5.t5 8 ]
*)

(* ex_cons123

(1 :: (2 :: (3 :: [ ])))
 -> (1 :: (2 :: [ 3 ]))
 -> (1 :: [ 2 3 ])
 -> [ 1 2 3 ]
*)

(* ex_izte23a0

(if0 0 then 2 else 3)
 -> 2
*)

(* ex_izte23a8

(if0 8 then 2 else 3)
 -> 3
*)

(* ex_iete23ae

(ifempty [ ] then 2 else 3)
 -> 2
*)

(* ex_iete23a123

(ifempty [ 1 2 3 ] then 3 else 6)
 -> 6
*)

(* ex_plusun

λt1.(t1 + 1)
*)

(* ex_letplus

let t2 = (2 + 3) in (λt3.(t3 + 1) t2)
 -> let t2 = 5 in (λt3.(t3 + 1) t2)
 -> (λt3.(t3 + 1) 5)
 -> (5 + 1)
 -> 6
*)

(* ex_letii3

let t4 = λt5.t5 in ((t4 t4) 3)
 -> ((λt5.t5 λt5.t5) 3)
 -> (λt5.t5 3)
 -> 3
*)

(* ex_sum

(fxp λt6.λt7.(if0 t7 then 0 else (t7 + (t6 (t7 - 1)))))
 -> λt8.(if0 t8 then 0 else (t8 + ((fxp λt6.λt7.(if0 t7 then 0 else (t7 + (t6 (t7 - 1))))) (t8 - 1))))
*)

(* ex_sum10 : trace trop grande, je met juste la fin

 -> (10 + (9 + (8 + (7 + (6 + (5 + (4 + (3 + (2 + (1 + (if0 0 then 0 else (0 + ((fxp λt9.λt10.(if0 t10 then 0 else (t10 + (t9 (t10 - 1))))) (0 - 1))))))))))))))
 -> (10 + (9 + (8 + (7 + (6 + (5 + (4 + (3 + (2 + (1 + 0))))))))))
 -> (10 + (9 + (8 + (7 + (6 + (5 + (4 + (3 + (2 + 1)))))))))
 -> (10 + (9 + (8 + (7 + (6 + (5 + (4 + (3 + 3))))))))
 -> (10 + (9 + (8 + (7 + (6 + (5 + (4 + 6)))))))
 -> (10 + (9 + (8 + (7 + (6 + (5 + 10))))))
 -> (10 + (9 + (8 + (7 + (6 + 15)))))
 -> (10 + (9 + (8 + (7 + 21))))
 -> (10 + (9 + (8 + 28)))
 -> (10 + (9 + 36))
 -> (10 + 45)
 -> 55
*)

(* ex_map

(fxp λt22.λt23.λt24.(ifempty t24 then [ ] else ((t23 (head t24)) :: ((t22 t23) (tail t24)))))
 -> λt25.λt26.(ifempty t26 then [ ] else ((t25 (head t26)) :: (((fxp λt22.λt23.λt24.(ifempty t24 then [ ] else ((t23 (head t24)) :: ((t22 t23) (tail t24))))) t25) (tail t26))))
*)


(*TEST pour le reste*)

(* ex_mapp123 : trace trop longue je met la fin

 -> (2 :: (3 :: (4 :: (ifempty [ ] then [ ] else ((λt30.(t30 + 1) (head [ ])) :: (((fxp λt27.λt28.λt29.(ifempty t29 then [ ] else ((t28 (head t29)) :: ((t27 t28) (tail t29))))) λt30.(t30 + 1)) (tail [ ])))))))
 -> (2 :: (3 :: (4 :: [ ])))
 -> (2 :: (3 :: [ 4 ]))
 -> (2 :: [ 3 4 ])
 -> [ 2 3 4 ]
*)

(* ex_letletmap : trace trop longue je met la fin

 -> (6 :: (7 :: (8 :: (λt52.(ifempty t52 then [ ] else ((λt41.(5 + t41) (head t52)) :: (((fxp λt42.λt43.λt44.(ifempty t44 then [ ] else ((t43 (head t44)) :: ((t42 t43) (tail t44))))) λt41.(5 + t41)) (tail t52)))) [ ]))))
 -> (6 :: (7 :: (8 :: (ifempty [ ] then [ ] else ((λt41.(5 + t41) (head [ ])) :: (((fxp λt42.λt43.λt44.(ifempty t44 then [ ] else ((t43 (head t44)) :: ((t42 t43) (tail t44))))) λt41.(5 + t41)) (tail [ ])))))))
 -> (6 :: (7 :: (8 :: [ ])))
 -> (6 :: (7 :: [ 8 ]))
 -> (6 :: [ 7 8 ])
 -> [ 6 7 8 ]
*)

(* ex_letmem1


*)

(* ex_expansif
let t1 = (ref [ ]) in let t2 = (t1 := (λt3.t3 :: (! t1))) in ((head (! t1)) + 8)
 -> let t1 = a1 in let t2 = (t1 := (λt3.t3 :: (! t1))) in ((head (! t1)) + 8)
 -> let t2 = (a1 := (λt3.t3 :: (! a1))) in ((head (! a1)) + 8)
 -> let t2 = () in ((head (! a1)) + 8)
 -> ((head (! a1)) + 8)
 -> ((head (λt3.t3 :: [ ])) + 8)
 -> ((head [ λt3.t3 ]) + 8)
 -> (λt3.t3 + 8)

*)

(* ex_expansif2

let t7 = (ref [ ]) in (! t7)
 -> let t7 = a3 in (! t7)
 -> (! a3)
 -> [ ]
*)

(* ex_expansif3

let t8 = (ref [ ]) in let t9 = (t8 := [ 3 ]) in (! t8)
 -> let t8 = a4 in let t9 = (t8 := [ 3 ]) in (! t8)
 -> let t9 = (a4 := [ 3 ]) in (! a4)
 -> let t9 = () in (! a4)
 -> (! a4)
 -> [ 3 ]
*)
